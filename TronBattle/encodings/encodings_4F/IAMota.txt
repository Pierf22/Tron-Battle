direction(0..3).
rows(39).
columns(63).

movement_4F(X,Y,D) | notmovement_4F(X,Y,D) :- position_4F(X,Y), direction(D).

%non è possibile che si muova in due direzioni diverse
:- #count{D:movement_4F(X,Y,D)} > 1.

%non è possibile che non si muova
:- #count{D:movement_4F(X,Y,D)} < 1.

%count_4F(DX,SX,UP,DOWN).
list(0,DX) :- count_4F(DX,_,_,_).
list(1,SX) :- count_4F(_,SX,_,_).
list(2,UP) :- count_4F(_,_,UP,_).
list(3,DOWN) :- count_4F(_,_,_,DOWN).

lower_value(I,V) :- list(I, V), list(_, V1), V1 > V.
maxvalue(I,V) :- list(I,V), not lower_value(I, V).

% Premia le mosse verso aree con più spazi liberi
:~ movement_4F(_,_,D), maxvalue(D,_). [-D@1]

% Penalizza le mosse che avvicinano al bordo
:~ movement_4F(X,Y,0), rows(R), X = R. [1@3, X, Y]
:~ movement_4F(X,Y,1), X = 0. [1@3, X, Y]
:~ movement_4F(X,Y,2),  columns(C), Y = C. [1@3, X, Y]
:~ movement_4F(X,Y,3), Y = 0. [1@3, X, Y]

% Premia la continuità del movimento
current_direction(D) :- movement_4F(_,_,D).
:~ movement_4F(X,Y,D), current_direction(CD), D != CD. [1@2,D]
